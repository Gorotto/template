// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$close-name: 'close';
$close-x: 0px;
$close-y: 0px;
$close-offset-x: 0px;
$close-offset-y: 0px;
$close-width: 27px;
$close-height: 27px;
$close-total-width: 80px;
$close-total-height: 197px;
$close-image: '../img/sprite.png';
$close: (0px, 0px, 0px, 0px, 27px, 27px, 80px, 197px, '../img/sprite.png', 'close', );
$next-name: 'next';
$next-x: 0px;
$next-y: 27px;
$next-offset-x: 0px;
$next-offset-y: -27px;
$next-width: 50px;
$next-height: 45px;
$next-total-width: 80px;
$next-total-height: 197px;
$next-image: '../img/sprite.png';
$next: (0px, 27px, 0px, -27px, 50px, 45px, 80px, 197px, '../img/sprite.png', 'next', );
$owl-video-play-name: 'owl.video.play';
$owl-video-play-x: 0px;
$owl-video-play-y: 117px;
$owl-video-play-offset-x: 0px;
$owl-video-play-offset-y: -117px;
$owl-video-play-width: 80px;
$owl-video-play-height: 80px;
$owl-video-play-total-width: 80px;
$owl-video-play-total-height: 197px;
$owl-video-play-image: '../img/sprite.png';
$owl-video-play: (0px, 117px, 0px, -117px, 80px, 80px, 80px, 197px, '../img/sprite.png', 'owl.video.play', );
$prev-name: 'prev';
$prev-x: 0px;
$prev-y: 72px;
$prev-offset-x: 0px;
$prev-offset-y: -72px;
$prev-width: 50px;
$prev-height: 45px;
$prev-total-width: 80px;
$prev-total-height: 197px;
$prev-image: '../img/sprite.png';
$prev: (0px, 72px, 0px, -72px, 50px, 45px, 80px, 197px, '../img/sprite.png', 'prev', );
$spritesheet-width: 80px;
$spritesheet-height: 197px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($close, $next, $owl-video-play, $prev, );
$spritesheet: (80px, 197px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
